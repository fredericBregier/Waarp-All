#!/usr/bin/env bash

##
## VARIABLES
##

CURDIR=$(dirname $(cd $(dirname $0) && pwd))
WORK_DIR=${WAARP_DIR:-$CURDIR}
INST=$1
LOGFILE="/var/log/waarp/$1/waarp-get-ftp.log"
LOCKFILE="/var/log/waarp/$1/waarp-get-ftp.lock"
CONF_DIR="/etc/waarp/conf.d/$INST"
LIST_FILE="$CONF_DIR/get-files.list"
R66COMMAND="waarp-r66client"

##
## Functions
##

usage() {
    echo <<EOT
    Usage: $0 HOSTID

The purpose of this script is to get all available files on a remote FTP(S)
server.

The folders and requested servers are listed in the file
etc/conf.d/HOSTID/get-files.list, in CSV, in which the format of each line is:

  flowid,rule,remote_host_ip,remote_host_port,ftp_user,ftp_password,filepattern,security,mode

In each line :

  security can be "implicit" or "explicit". This enables FTPS. With any other
  value, the transfer will use FTP.

  mode can be "active" or "passive". It defaults to passive.

  filepattern is a matching pattern for files to fetch from the remote ftp
  server (example: "/sub/folder/*.txt").

EOT
}

log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S.%N')] [$$] $@" >> $LOGFILE
}

lock() {
    touch $LOCKFILE
}

unlock() {
    rm -f $LOCKFILE
}

is_locked() {
    [ -f $LOCKFILE ]
}

is_server() {
    [ -f "$CONF_DIR/server.xml" ]
}

send_files() {
    local action=msend
    if is_server; then
        action=masend
    fi
    $R66COMMAND $INST $action -rule $1 -to $2 -file $3 -client
}

get_files() {
    local nb=$(cat - | grep nb | sed -e 's|.*nb=\([0-9]\+\).*|\1|')
    log "$nb available files"
    if [ "$nb" = "0" ]; then
        return 1
    else
        return 0
    fi
}

##
## MAIN
##

cd $WORK_DIR

log "Start"

if is_locked; then
    log "Another process is already running"
    exit 0
fi
lock
trap unlock EXIT

if [ -z "$INST" ]; then
    usage
    exit 1
fi
if [ ! -d $CONF_DIR ]; then
    echo "ERROR: $INST does not exist"
    exit 2
fi

if [ ! -f $LIST_FILE ]; then
    log "No $LIST_FILE found"
    exit 0
fi

while read -r line
do
# test_from_ftp_server,test_from_ftp_server,192.168.50.10,21,part2,part2,/,implicit,auto
    flowid=$(echo $line | cut -d, -f1)
    rule=$(echo $line | cut -d, -f2)
    remotehost=$(echo $line | cut -d, -f3)
    remoteport=$(echo $line | cut -d, -f4)
    user=$(echo $line | cut -d, -f5)
    password=$(echo $line | cut -d, -f6)
    filepattern=$(echo $line | cut -d, -f7)
    security=$(echo $line | cut -d, -f8)
    mode=$(echo $line | cut -d, -f9)
    scheme=ftp
    extraargs=
    case security in
        implicit)
            scheme=ftps
            ;;
        explicit)
            extraargs="$extraargs --ftp-ssl"
            ;;
    esac
    case $mode in
        active)
            extraargs="$extraargs --ftp-port"
            ;;
        passive)
            extraargs="$extraargs --ftp-pasv"
            ;;
    esac

    log "Fetching files for $flowid on $remotehost"
    mkdir -p /var/lib/waarp/$INST/out/$flowid
    cd /var/lib/waarp/$INST/out/$flowid

    files=$(curl --list-only $extraargs "$scheme://$user:$password@$remotehost:$remoteport/$filepattern")
    for file in $files; do
        curl $extraargs -O "$scheme://$user:$password@$remotehost:$remoteport/$filepattern/$file"
        $R66COMMAND $INST send -to $INST -rule $rule -file $file
    done

done < "$LIST_FILE"

log "Fin du processus"